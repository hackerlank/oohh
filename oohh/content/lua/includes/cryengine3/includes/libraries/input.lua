local key_input = input.SetupInputEvent("Key")local action_input = input.SetupInputEvent("Action")--local char_input = input.SetupInputEvent("Char")--local char_hackhook.Add("InputEvent", "input", function(key, val, char)	if console.IsVisible() then return end	local press = val == 1	if key_input(key, press) == false then return false end	--if char_hack and char_input(char_hack, press) == false then return false endend)hook.Add("WindowsMessageChar", "input", function(char)	if console.IsVisible() then return end	hook.Call("OnCharInput", char:sub(1,1))	--char_hack = charend)hook.Add("ActionEvent", "input", function(key, press, val)	press = press == 1	if action_input(key, press) == false then return false endend)if CLIENT then -- bind	input.Binds = {}	function input.Bind(key, cmd)		check(key, "string")		check(cmd, "string", "nil")		luadata.SetKeyValueInFile("input.txt", key, cmd)		input.Binds[key] = cmd	end	function input.Initialize()		input.Binds = luadata.ReadFile("input.txt")	end	function input.Call(key, press)		if input.DisableFocus then return end		press = press and "" or "~"		local cmd = input.Binds[press .. key]		if cmd then			console.RunString(cmd)			return false		end	end	hook.Add("OnKeyInput", "keybind", input.Call, print, math.huge)	function input.Command(ply, line, key, ...)		cmd = table.concat({...}, " ")		input.Bind(key, cmd)	end	console.AddCommand("bind", input.Command)enddo -- networked keys for players	local META = util.FindMetaTable("player")		local function add_event(name, check)			input.SetupAccessorFunctions(META, name)				if CLIENT then			hook.Add("On" .. name .. "Input", "player_" .. name .. "_event", function(key, press)				local ply = entities.GetLocalPlayer()				if ply:IsValid() then										if check and not check[key] then return end										input.CallOnTable(ply, name, key, press, nil, nil, true)					message.SendToServer("Player" .. name .. "Event", key, press)										if not mouse.IsVisible() then						local wep = ply:GetActiveWeapon()						if wep:IsValid() then							local func = wep["On" .. name .. "Event"]							if func then								if func(wep, key, press) == false then									return false								end							end						end					end					return hook.Call("Player" .. name .. "Event", ply, key, press)				end			end, print)		end				if SERVER then			message.Hook("Player" .. name .. "Event", function(ply, key, press)				if ply:IsValid() then					if check and not check[key] then return end					input.CallOnTable(ply, name, key, press, nil, nil, true)					local wep = ply:GetActiveWeapon()					if wep:IsValid() then						local func = wep["On" .. name .. "Event"]												if func then							return func(wep, key, press)						end												hook.Call("Player" .. name .. "Event", ply, key, press)					end				end			end, print)		end	end				add_event("Key")	add_event("Char")	add_event(		"Action",		{			moveforward = true,			moveback = true,			moveleft = true,			moveright = true,			attack1 = true,			zoom = true,			jump = true,			crouch = true,			sprint = true,			prone = true,			nextitem = true,			previtem = true,		}	)end